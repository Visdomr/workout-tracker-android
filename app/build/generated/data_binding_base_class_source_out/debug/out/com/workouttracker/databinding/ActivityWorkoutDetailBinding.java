// Generated by view binder compiler. Do not edit!
package com.workouttracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.workouttracker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWorkoutDetailBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ChipGroup chipGroupCategories;

  @NonNull
  public final FloatingActionButton fabAddExercise;

  @NonNull
  public final TextView labelNotes;

  @NonNull
  public final LinearLayout layoutEmptyExercises;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerViewExercises;

  @NonNull
  public final TextView textExerciseCount;

  @NonNull
  public final TextView textWorkoutDate;

  @NonNull
  public final TextView textWorkoutDuration;

  @NonNull
  public final TextView textWorkoutName;

  @NonNull
  public final TextView textWorkoutNotes;

  @NonNull
  public final Toolbar toolbar;

  private ActivityWorkoutDetailBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ChipGroup chipGroupCategories, @NonNull FloatingActionButton fabAddExercise,
      @NonNull TextView labelNotes, @NonNull LinearLayout layoutEmptyExercises,
      @NonNull ProgressBar progressBar, @NonNull RecyclerView recyclerViewExercises,
      @NonNull TextView textExerciseCount, @NonNull TextView textWorkoutDate,
      @NonNull TextView textWorkoutDuration, @NonNull TextView textWorkoutName,
      @NonNull TextView textWorkoutNotes, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.chipGroupCategories = chipGroupCategories;
    this.fabAddExercise = fabAddExercise;
    this.labelNotes = labelNotes;
    this.layoutEmptyExercises = layoutEmptyExercises;
    this.progressBar = progressBar;
    this.recyclerViewExercises = recyclerViewExercises;
    this.textExerciseCount = textExerciseCount;
    this.textWorkoutDate = textWorkoutDate;
    this.textWorkoutDuration = textWorkoutDuration;
    this.textWorkoutName = textWorkoutName;
    this.textWorkoutNotes = textWorkoutNotes;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWorkoutDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWorkoutDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_workout_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWorkoutDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chip_group_categories;
      ChipGroup chipGroupCategories = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupCategories == null) {
        break missingId;
      }

      id = R.id.fab_add_exercise;
      FloatingActionButton fabAddExercise = ViewBindings.findChildViewById(rootView, id);
      if (fabAddExercise == null) {
        break missingId;
      }

      id = R.id.label_notes;
      TextView labelNotes = ViewBindings.findChildViewById(rootView, id);
      if (labelNotes == null) {
        break missingId;
      }

      id = R.id.layout_empty_exercises;
      LinearLayout layoutEmptyExercises = ViewBindings.findChildViewById(rootView, id);
      if (layoutEmptyExercises == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recycler_view_exercises;
      RecyclerView recyclerViewExercises = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewExercises == null) {
        break missingId;
      }

      id = R.id.text_exercise_count;
      TextView textExerciseCount = ViewBindings.findChildViewById(rootView, id);
      if (textExerciseCount == null) {
        break missingId;
      }

      id = R.id.text_workout_date;
      TextView textWorkoutDate = ViewBindings.findChildViewById(rootView, id);
      if (textWorkoutDate == null) {
        break missingId;
      }

      id = R.id.text_workout_duration;
      TextView textWorkoutDuration = ViewBindings.findChildViewById(rootView, id);
      if (textWorkoutDuration == null) {
        break missingId;
      }

      id = R.id.text_workout_name;
      TextView textWorkoutName = ViewBindings.findChildViewById(rootView, id);
      if (textWorkoutName == null) {
        break missingId;
      }

      id = R.id.text_workout_notes;
      TextView textWorkoutNotes = ViewBindings.findChildViewById(rootView, id);
      if (textWorkoutNotes == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityWorkoutDetailBinding((CoordinatorLayout) rootView, chipGroupCategories,
          fabAddExercise, labelNotes, layoutEmptyExercises, progressBar, recyclerViewExercises,
          textExerciseCount, textWorkoutDate, textWorkoutDuration, textWorkoutName,
          textWorkoutNotes, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
